{"version":3,"sources":["logo.svg","component/ListRender.js","component/ItemInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListRender","props","list","items","map","value","key","item","onChange","e","setUpdate","target","className","icon","onClick","onDelete","library","add","faTrash","ItemInput","currentEntry","setState","currentItem","Date","now","console","log","state","handleChange","preventDefault","newitem","filteredItems","filter","class","type","name","this","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mKAAAA,EAAOC,QAAU,IAA0B,kC,0NCmC5BC,MA3Bf,SAAoBC,GAEhB,IAAMC,EAAOD,EAAME,MAAMC,KAAK,SAAAC,GAC1B,OACA,wBAAIC,IAAKD,EAAMC,KAAK,2BAAOD,MAAOA,EAAME,KACxCC,SAAW,SAAAC,GAAC,OAAIR,EAAMS,UAAUD,EAAEE,OAAON,MAAMA,EAAMC,QACrD,8BAAM,kBAAC,IAAD,CAAiBM,UAAU,iBAAiBC,KAAK,QAAQC,QAAS,kBAAMb,EAAMc,SAASV,EAAMC,aAOvG,OACI,yBAAKM,UAAU,QACX,4BACI,kBAAC,IAAD,KAEIV,M,uBCpBpBc,IAAQC,IAAIC,KAEL,IAkGQC,EAlGf,kDAEI,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IAYVmB,aAAe,SAACX,GACZ,EAAKY,SAAS,CACVC,YAAc,CACVf,KAAKE,EAAEE,OAAON,MACdC,IAAKiB,KAAKC,SAEhB,kBAAMC,QAAQC,IAAI,EAAKC,MAAML,iBAnBhB,EAsBnBM,aAAe,SAACnB,GACZA,EAAEoB,iBACF,IAAMC,EAAU,EAAKH,MAAML,YAC3B,GAAoB,KAAjBQ,EAAQvB,KACX,CACI,IAAMJ,EAAK,sBAAO,EAAKwB,MAAMxB,OAAlB,CAAyB2B,IACpC,EAAKT,SAAS,CACVlB,MAAQA,EACRmB,YAAa,CACTf,KAAM,GACND,IAAK,MAEX,kBAAMmB,QAAQC,IAAI,EAAKC,MAAMxB,YAlCpB,EAyCnBO,UAAY,SAACL,EAAQC,GAEjB,IAAMH,EAAQ,EAAKwB,MAAMxB,MACzBA,EAAMC,KAAI,SAAEG,GACLA,EAAKD,MAAQA,IAEZC,EAAKA,KAAOF,MAIpB,EAAKgB,SAAS,CACVlB,MAAQA,KApDG,EAwDnBY,SAAW,SAACT,GACR,IAAMyB,EAAgB,EAAKJ,MAAMxB,MAAM6B,QAAO,SAAAzB,GAAI,OAAIA,EAAKD,KAAOA,KAElE,EAAKe,SAAS,CACVlB,MAAO4B,KAzDX,EAAKJ,MAAQ,CACRxB,MAAQ,GACRmB,YAAc,CACVf,KAAO,GACPD,IAAK,KAPC,EAFvB,qDAyEQ,OACI,6BACI,yBAAK2B,MAAM,aACX,8BACI,2BAAOC,KAAK,OACZC,KAAK,OACL9B,MAAO+B,KAAKT,MAAML,YAAYf,KAC9BC,SAAU4B,KAAKhB,aACfiB,YAAY,aAGZ,4BAAQvB,QAASsB,KAAKR,cAAtB,SAIJ,6BACA,kBAAC,EAAD,CAAYzB,MAAOiC,KAAKT,MAAMxB,MAC9BO,UAAW0B,KAAK1B,UAChBK,SAAUqB,KAAKrB,iBA3F/B,GAA+BuB,aCMhBC,MARf,WACE,OACE,yBAAK3B,UAAU,OACd,kBAAC,EAAD,QCGe4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.bbb42d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\n\r\nimport React from 'react'\r\nimport '../ListRender.css'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport FlipMove from 'react-flip-move'\r\n\r\n\r\nfunction ListRender(props) {\r\n\r\n    const list = props.items.map( value => {\r\n        return (\r\n        <li key={value.key}><input value={value.item} \r\n        onChange={(e => props.setUpdate(e.target.value,value.key))} />\r\n        <span><FontAwesomeIcon className=\"fontIconDelete\" icon=\"trash\" onClick={() => props.onDelete(value.key)}/></span>\r\n        </li>\r\n        \r\n        )\r\n    });\r\n\r\n    \r\n    return (\r\n        <div className=\"list\">\r\n            <ul>\r\n                <FlipMove>\r\n                {\r\n                    list\r\n                }\r\n                </FlipMove>\r\n            </ul>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListRender\r\n\r\n","import React, { Component } from 'react'\r\nimport ListRender from './ListRender'\r\nimport '../ItemInput.css'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(faTrash)\r\n\r\nexport class ItemInput extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             items : [],\r\n             currentItem : {\r\n                 item : \"\",\r\n                 key: \"\"\r\n             }\r\n        }\r\n    }\r\n    \r\n\r\n    currentEntry = (e) => {\r\n        this.setState({\r\n            currentItem : {\r\n                item:e.target.value,\r\n                key: Date.now()\r\n            } \r\n        },() => console.log(this.state.currentItem))\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        e.preventDefault();\r\n        const newitem = this.state.currentItem;\r\n        if(newitem.item !== \"\")\r\n        {\r\n            const items = [...this.state.items, newitem];\r\n            this.setState({\r\n                items : items,\r\n                currentItem :{\r\n                    item: \"\",\r\n                    key: \"\"\r\n                }\r\n            },() => console.log(this.state.items)\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n    setUpdate = (value , key) => {\r\n\r\n        const items = this.state.items;\r\n        items.map(( item ) => {\r\n            if(item.key === key)\r\n            {\r\n                item.item = value;\r\n            }\r\n        } )\r\n\r\n        this.setState({\r\n            items : items\r\n        })\r\n    }\r\n\r\n    onDelete = (key) => {\r\n        const filteredItems = this.state.items.filter(item => item.key != key);\r\n\r\n        this.setState({\r\n            items: filteredItems\r\n        })\r\n\r\n        \r\n    }\r\n    \r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"InputItem\">\r\n                <form>\r\n                    <input type=\"text\"\r\n                    name=\"item\"\r\n                    value={this.state.currentItem.item}\r\n                    onChange={this.currentEntry}\r\n                    placeholder=\"Add item\"\r\n                    />\r\n\r\n                    <button onClick={this.handleChange}>Add</button>\r\n                </form> \r\n                \r\n            </div>\r\n                <div>\r\n                <ListRender items={this.state.items} \r\n                setUpdate={this.setUpdate}\r\n                onDelete={this.onDelete} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ItemInput\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ItemInput from './component/ItemInput';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <ItemInput/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}